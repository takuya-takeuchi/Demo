// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ProgressRequest {
    private @Nullable Long progress;

    public @Nullable Long getProgress() {
      return progress;
    }

    public void setProgress(@Nullable Long setterArg) {
      this.progress = setterArg;
    }

    private @Nullable Boolean hasError;

    public @Nullable Boolean getHasError() {
      return hasError;
    }

    public void setHasError(@Nullable Boolean setterArg) {
      this.hasError = setterArg;
    }

    public static final class Builder {

      private @Nullable Long progress;

      public @NonNull Builder setProgress(@Nullable Long setterArg) {
        this.progress = setterArg;
        return this;
      }

      private @Nullable Boolean hasError;

      public @NonNull Builder setHasError(@Nullable Boolean setterArg) {
        this.hasError = setterArg;
        return this;
      }

      public @NonNull ProgressRequest build() {
        ProgressRequest pigeonReturn = new ProgressRequest();
        pigeonReturn.setProgress(progress);
        pigeonReturn.setHasError(hasError);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(progress);
      toListResult.add(hasError);
      return toListResult;
    }

    static @NonNull ProgressRequest fromList(@NonNull ArrayList<Object> list) {
      ProgressRequest pigeonResult = new ProgressRequest();
      Object progress = list.get(0);
      pigeonResult.setProgress((progress == null) ? null : ((progress instanceof Integer) ? (Integer) progress : (Long) progress));
      Object hasError = list.get(1);
      pigeonResult.setHasError((Boolean) hasError);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface NativeApi {

    void startAsync(@NonNull Result<Void> result);

    /** The codec used by NativeApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**Sets up an instance of `NativeApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable NativeApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_example_package.NativeApi.startAsync", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.startAsync(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class FlutterApiCodec extends StandardMessageCodec {
    public static final FlutterApiCodec INSTANCE = new FlutterApiCodec();

    private FlutterApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ProgressRequest.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ProgressRequest) {
        stream.write(128);
        writeValue(stream, ((ProgressRequest) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FlutterApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public FlutterApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by FlutterApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return FlutterApiCodec.INSTANCE;
    }
    public void sendProgressAsync(@NonNull ProgressRequest requestArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.pigeon_example_package.FlutterApi.sendProgressAsync", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(requestArg)),
          channelReply -> callback.reply(null));
    }
  }
}
