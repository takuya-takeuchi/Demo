/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef imageProcService_H
#define imageProcService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Server_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class imageProcServiceIf {
 public:
  virtual ~imageProcServiceIf() {}
  virtual void Revert(std::string& _return, const std::string& image, const int32_t width, const int32_t height) = 0;
};

class imageProcServiceIfFactory {
 public:
  typedef imageProcServiceIf Handler;

  virtual ~imageProcServiceIfFactory() {}

  virtual imageProcServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(imageProcServiceIf* /* handler */) = 0;
};

class imageProcServiceIfSingletonFactory : virtual public imageProcServiceIfFactory {
 public:
  imageProcServiceIfSingletonFactory(const boost::shared_ptr<imageProcServiceIf>& iface) : iface_(iface) {}
  virtual ~imageProcServiceIfSingletonFactory() {}

  virtual imageProcServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(imageProcServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<imageProcServiceIf> iface_;
};

class imageProcServiceNull : virtual public imageProcServiceIf {
 public:
  virtual ~imageProcServiceNull() {}
  void Revert(std::string& /* _return */, const std::string& /* image */, const int32_t /* width */, const int32_t /* height */) {
    return;
  }
};

typedef struct _imageProcService_Revert_args__isset {
  _imageProcService_Revert_args__isset() : image(false), width(false), height(false) {}
  bool image :1;
  bool width :1;
  bool height :1;
} _imageProcService_Revert_args__isset;

class imageProcService_Revert_args {
 public:

  imageProcService_Revert_args(const imageProcService_Revert_args&);
  imageProcService_Revert_args& operator=(const imageProcService_Revert_args&);
  imageProcService_Revert_args() : image(), width(0), height(0) {
  }

  virtual ~imageProcService_Revert_args() throw();
  std::string image;
  int32_t width;
  int32_t height;

  _imageProcService_Revert_args__isset __isset;

  void __set_image(const std::string& val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  bool operator == (const imageProcService_Revert_args & rhs) const
  {
    if (!(image == rhs.image))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const imageProcService_Revert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const imageProcService_Revert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class imageProcService_Revert_pargs {
 public:


  virtual ~imageProcService_Revert_pargs() throw();
  const std::string* image;
  const int32_t* width;
  const int32_t* height;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _imageProcService_Revert_result__isset {
  _imageProcService_Revert_result__isset() : success(false) {}
  bool success :1;
} _imageProcService_Revert_result__isset;

class imageProcService_Revert_result {
 public:

  imageProcService_Revert_result(const imageProcService_Revert_result&);
  imageProcService_Revert_result& operator=(const imageProcService_Revert_result&);
  imageProcService_Revert_result() : success() {
  }

  virtual ~imageProcService_Revert_result() throw();
  std::string success;

  _imageProcService_Revert_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const imageProcService_Revert_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const imageProcService_Revert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const imageProcService_Revert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _imageProcService_Revert_presult__isset {
  _imageProcService_Revert_presult__isset() : success(false) {}
  bool success :1;
} _imageProcService_Revert_presult__isset;

class imageProcService_Revert_presult {
 public:


  virtual ~imageProcService_Revert_presult() throw();
  std::string* success;

  _imageProcService_Revert_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class imageProcServiceClient : virtual public imageProcServiceIf {
 public:
  imageProcServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  imageProcServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Revert(std::string& _return, const std::string& image, const int32_t width, const int32_t height);
  void send_Revert(const std::string& image, const int32_t width, const int32_t height);
  void recv_Revert(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class imageProcServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<imageProcServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (imageProcServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Revert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  imageProcServiceProcessor(boost::shared_ptr<imageProcServiceIf> iface) :
    iface_(iface) {
    processMap_["Revert"] = &imageProcServiceProcessor::process_Revert;
  }

  virtual ~imageProcServiceProcessor() {}
};

class imageProcServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  imageProcServiceProcessorFactory(const ::boost::shared_ptr< imageProcServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< imageProcServiceIfFactory > handlerFactory_;
};

class imageProcServiceMultiface : virtual public imageProcServiceIf {
 public:
  imageProcServiceMultiface(std::vector<boost::shared_ptr<imageProcServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~imageProcServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<imageProcServiceIf> > ifaces_;
  imageProcServiceMultiface() {}
  void add(boost::shared_ptr<imageProcServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Revert(std::string& _return, const std::string& image, const int32_t width, const int32_t height) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Revert(_return, image, width, height);
    }
    ifaces_[i]->Revert(_return, image, width, height);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class imageProcServiceConcurrentClient : virtual public imageProcServiceIf {
 public:
  imageProcServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  imageProcServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Revert(std::string& _return, const std::string& image, const int32_t width, const int32_t height);
  int32_t send_Revert(const std::string& image, const int32_t width, const int32_t height);
  void recv_Revert(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
